swagger: '2.0'
info:
  title: 'Angular Academy API'
host: 'localhost:4242'
tags:
  - name: 'User'
    description: 'Operations about user'

paths:
  /users:
    post:
      tags:
        - 'user'
      summary: 'Create user'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'user info'
          required:
            - username
            - password
          properties:
            firstname:
              type: string
            lastname:
              type: string
            username:
              type: string
            password:
              type: string
      responses:
        '200':
          description: 'The created user and the jwt'
          schema:
            properties:
              user:
                $ref: '#/definitions/User'
              jwt:
                type: string
        '409':
          description: 'Username exists'

  /users/signin:
    post:
      tags:
        - 'user'
      summary: 'Logs user into the system'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'user credentials'
          required:
            - username
            - password
          properties:
            username:
              type: string
            password:
              type: string
      responses:
        '200':
          description: 'successful operation'
          schema:
            properties:
              user:
                $ref: '#/definitions/User'
              jwt:
                type: string
        '400':
          description: 'Invalid username/password supplied'
  /users/details:
    get:
      tags:
        - 'user'
      summary: 'Get the details of the user logged in'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/User'
        '404':
          description: 'User not found.'
      security:
        - jwt: []
  /users/:
    put:
      tags:
        - 'user'
      summary: 'Update user'
      description: 'This can only be done by the logged in user.'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Updated user object'
          required: true
          schema:
            properties:
              firstname:
                type: string
              lastname:
                type: string
              username:
                type: string
              password:
                type: string
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/User'
        '404':
          description: 'User not found'
      security:
        - jwt: []
    delete:
      tags:
        - 'user'
      summary: 'Delete user'
      description: 'This can only be done by the logged in user.'
      produces:
        - 'application/json'
      responses:
        '404':
          description: 'User not found'
      security:
        - jwt: []

securityDefinitions:
  jwt:
    type: apiKey
    in: header
    name: token
definitions:
  User:
    type: 'object'
    properties:
      id:
        type: 'string'
      username:
        type: 'string'
      firstName:
        type: 'string'
      lastName:
        type: 'string'
